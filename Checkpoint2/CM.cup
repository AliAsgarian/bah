/*
  Created by: Ali Asgarian and Brenden Moorehead (inspired by Fei Song)
  File Name: CM.cup (inspired by tiny.cup)
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   

/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal BOOL, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER, LT, LE, GT, GE, EQ, NE, NOT, OR, AND, ASSIGN, SEMI, COMMA, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal String ID, NUM, TRUTH;
terminal ERROR;


/* TODO: EVERYTHING AFTER THIS PART NEEDS TO BE CHANGED STILL */
non terminal DecList program, decList;
non terminal Dec dec, funPrototype;
non terminal VarDec varDeclaration, param;
non terminal FunctionDec funDeclaration;
non terminal NameTy typeSpecifier;
non terminal VarDecList params, paramList, localDeclarations;
non terminal ExpList args, argsList, statementList;
non terminal Exp expression, compoundStatement, expressionStatement, iterationStatement, selectionStatement, statement, returnStatement;
non terminal Var var;

precedence nonassoc AND, OR, LT, GT, LE, GE, NE, EQ;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left ELSE, SEMI, ID;

/* ----------------------------Grammar Section-------------------- */
start with program;

/* Represents the complete program structure */
program  ::= decList:dl
            {: RESULT = dl; :}
         ;

/* Sequence of declarations (variables, functions, or prototypes) */
/* Can consist of a single declaration or a list of them */
decList  ::= decList:dl dec:d
            {: DecList t = dl;
               while ( t.tail != null )
                  t = t.tail;
               t.tail = new DecList(d, null);
               RESULT = dl;
            :}
         | dec:d
            {: RESULT = new DecList(d, null); :}
         ;

/* A single declaration: either a variable, function, or prototype */
dec   ::= varDeclaration:vd
         {: RESULT = vd; :}
      | funDeclaration:fd
         {: RESULT = fd; :}
      | funPrototype:fp
         {: RESULT = fp; :}
      ;

/* Variable declaration: can be scalar or array */
/* Example: int x; or int x[10]; */
varDeclaration ::= typeSpecifier:ts ID:id SEMI
                  {: RESULT = new SimpleDec(tsleft, tsright, ts, id); :}
               | typeSpecifier:ts ID:id LBRACKET NUM:n RBRACKET SEMI
                  {: RESULT = new ArrayDec(tsleft, tsright, ts, id, Integer.parseInt(n)); :}
               
               /* ERROR: Missing array size in declaration */
               | typeSpecifier:ts ID:id LBRACKET error:e SEMI
                  {: parser.report_error("Invalid array declaration: missing array size.", e); 
                     RESULT = new SimpleDec(tsleft, tsright, ts, null);
                  :}
               
               /* ERROR: Missing right bracket */
               | typeSpecifier:ts ID:id LBRACKET NUM:n error:e SEMI
                  {: parser.report_error("Invalid array declaration: missing right bracket.", e); 
                     RESULT = new SimpleDec(tsleft, tsright, ts, null);
                  :}
               
               /* ERROR: Missing left bracket */
               | typeSpecifier:ts ID:id error:e RBRACKET
                  {: parser.report_error("Invalid array declaration: missing left bracket.", e); 
                     RESULT = new SimpleDec(tsleft, tsright, ts, null);
                  :}
               
               /* ERROR: Unexpected argument before semicolon */
               | typeSpecifier:ts ID:id error:e SEMI
                  {: parser.report_error("Invalid variable declaration: unexpected argument before semicolon.", e); 
                     RESULT = new SimpleDec(tsleft, tsright, ts, null);
                  :}
               
               /* ERROR: Invalid variable name */
               | typeSpecifier:ts error:e SEMI
                  {: parser.report_error("Invalid variable declaration: invalid variable name.", e); 
                     RESULT = new SimpleDec(tsleft, tsright, ts, null);
                  :}
               
               /* ERROR: Invalid type or naming convention */
               | error:e SEMI
                  {: parser.report_error("Invalid variable declaration: type not (bool, void, int) or invalid naming convention.", e); 
                     RESULT = new SimpleDec(eleft, 0, new NameTy(eleft, 0, NameTy.NULL), null);
                  :}
               ;


/* Type specifiers for variables and functions */
/* Includes boolean, integer, and void for functions */
typeSpecifier  ::= BOOL:b
                  {: RESULT = new NameTy(bleft, bright, NameTy.BOOL); :}
               | INT:i
                  {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
               | VOID:v
                  {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
               ;


/* Function declaration: includes return type, function name, parameters, and body */
/* Example: int main(void) */
funDeclaration ::= typeSpecifier:ts ID:id LPAREN params:ps RPAREN compoundStatement:cs
                  {: RESULT = new FunctionDec(tsleft, tsright, ts, id, ps, cs); :}
               
               /* ERROR: Incorrect function parameters */
               | typeSpecifier:ts ID:id LPAREN error:e compoundStatement:cs
                  {: parser.report_error("Invalid function declaration: incorrect parameters (MUST HAVE void for empty parameters).", e);
                     RESULT = new FunctionDec(tsleft, tsright, ts, id, null, cs);
                  :}
               
               /* ERROR: Missing left parenthesis */
               | typeSpecifier:ts ID:id error:e compoundStatement:cs
                  {: parser.report_error("Invalid function declaration: missing left parenthesis.", e);
                     RESULT = new FunctionDec(tsleft, tsright, ts, id, null, cs);
                  :}
               
               /* ERROR: Missing right parenthesis */
               | typeSpecifier:ts ID:id LPAREN params:ps error:e compoundStatement:cs
                  {: parser.report_error("Invalid function declaration: missing right parenthesis.", e);
                     RESULT = new FunctionDec(tsleft, tsright, ts, id, null, cs);
                  :}
               
               /* ERROR: Missing function name */
               | typeSpecifier:ts error:e compoundStatement:cs
                  {: parser.report_error("Invalid function declaration: missing function name.", e);
                     RESULT = new FunctionDec(tsleft, tsright, ts, null, null, cs);
                  :}
               ;

/* Function prototype: declares the function signature without the body */
/* Example: int function(int x, int y); */
funPrototype ::= typeSpecifier:ts ID:id LPAREN params:ps RPAREN SEMI
                  {: RESULT = new FunctionDec(tsleft, tsright, ts, id, ps, null); :}
               
               /* ERROR: Missing semicolon at the end of prototype */
               | typeSpecifier:ts ID:id LPAREN params:ps RPAREN error:e
                  {: parser.report_error("Invalid function prototype: missing semicolon.", e); :}
               
               /* ERROR: Missing left parenthesis */
               | typeSpecifier:ts ID:id error:e params:ps RPAREN SEMI
                  {: parser.report_error("Invalid function prototype: missing left parenthesis.", e); :}
               
               /* ERROR: Missing right parenthesis */
               | typeSpecifier:ts ID:id LPAREN params:ps error:e SEMI
                  {: parser.report_error("Invalid function prototype: missing right parenthesis.", e); :}
               
               /* ERROR: Incorrect function parameters */
               | typeSpecifier:ts ID:id LPAREN error:e RPAREN SEMI
                  {: parser.report_error("Invalid function prototype: incorrect parameters (MUST HAVE void for empty parameters).", e);
                     RESULT = new FunctionDec(tsleft, tsright, ts, id, null, null);
                  :}
               ;

/* Parameters for a function: can be a list of parameters or 'void' (no parameters) */
params   ::= paramList:pl
            {: RESULT = pl; :}
         | VOID
         ;

/* A list of parameters: comma-separated */
/* Example: int x, int y[] */
paramList   ::= paramList:pl COMMA param:p
               {: VarDecList t = pl;
                  while ( t.tail != null )
                     t = t.tail;
                  t.tail = new VarDecList(p, null);
                  RESULT = pl;
               :}
            | param:p
               {: RESULT = new VarDecList(p, null); :}
            ;

/* A single parameter: can be a scalar or an array */
param    ::= typeSpecifier:ts ID:id
            {: RESULT = new SimpleDec(tsleft, tsright, ts, id); :}
         | typeSpecifier:ts ID:id LBRACKET RBRACKET
            {: RESULT = new ArrayDec(tsleft, tsright, ts, id, 0); :}
         ;

/* Compound statement: a block of code enclosed in curly braces */
/* It may include local variable declarations and a sequence of statements */
compoundStatement ::= LBRACE localDeclarations:ld statementList:sl RBRACE
                     {: RESULT = new CompoundExp(ldleft, ldright, ld, sl); :}
                  ;

/* Local variable declarations inside a block */
/* These are optional and can be empty */
localDeclarations ::= localDeclarations:ld varDeclaration:vd
                     {: VarDecList t = ld;
                        if(t == null) {
                           ld = new VarDecList(vd, null);
                           RESULT = ld;
                        } else {
                           while( t.tail != null )
                              t = t.tail;
                           t.tail = new VarDecList(vd, null);
                           RESULT = ld;
                        }
                     :}
                  |
                     {: RESULT = null; :}
                  ;

/* Sequence of statements inside a block */
/* This is also optional and can be empty */
statementList  ::= statementList:sl statement:s
                  {: ExpList t = sl;
                     if(t == null) {
                        sl = new ExpList(s, null);
                        RESULT = sl;
                     } else {
                        while( t.tail != null )
                           t = t.tail;
                        t.tail = new ExpList(s, null);
                        RESULT = sl;
                     }
                  :}
               |
                  {: RESULT = null; :}
               ;

/* A single statement: can be an expression, compound statement, selection, iteration, or return */
statement   ::= expressionStatement:es
               {: RESULT = es; :}
            | compoundStatement:cs
               {: RESULT = cs; :}
            | selectionStatement:ss
               {: RESULT = ss; :}
            | iterationStatement:is
               {: RESULT = is; :}
            | returnStatement:rs
               {: RESULT = rs; :}
            ;

/* Expression statement: an optional expression followed by a semicolon */
/* Example: x = 5; or ; */
expressionStatement  ::= expression:e SEMI
                        {: RESULT = e; :}
                     | SEMI
                     ;

/* Selection statement: an 'if' or 'if-else' statement */
/* Example: if (x > 0) { ... } or if (x > 0) { ... } else { ... } */
selectionStatement ::= 
                     /* Standard IF statement without ELSE */
                     IF:i LPAREN expression:e RPAREN statement:s
                        {: RESULT = new IfExp(ileft, iright, e, s, new NilExp(ileft, iright)); :}
                     
                     /* Standard IF-ELSE statement */
                     | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                        {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
                     
                     /* ERROR: Invalid syntax after '(' in IF condition */
                     | IF:i LPAREN error:e expression:exp RPAREN statement:s1 ELSE statement:s2
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax after '('.", e); 
                           RESULT = new IfExp(ileft, iright, exp, s1, s2);
                        :}
                     
                     /* ERROR: Invalid condition inside IF statement */
                     | IF:i LPAREN error:e RPAREN statement:s1 ELSE statement:s2
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid conditional statement.", e); 
                           RESULT = new IfExp(ileft, iright, null, s1, s2);
                        :}
                     
                     /* ERROR: Invalid syntax after ')' in IF statement */
                     | IF:i LPAREN expression:exp RPAREN error:e statement:s1 ELSE statement:s2
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax after ')'.", e); 
                           RESULT = new IfExp(ileft, iright, exp, s1, s2);
                        :}
                     
                     /* ERROR: Invalid syntax after ELSE */
                     | IF:i LPAREN expression:exp RPAREN statement:s1 ELSE error:e statement:s2
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax after else.", e); 
                           RESULT = new IfExp(ileft, iright, exp, s1, s2);
                        :}
                     
                     /* ERROR: Invalid condition inside IF statement without ELSE */
                     | IF:i LPAREN error:e RPAREN statement:s
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid conditional statement.", e); 
                           RESULT = new IfExp(ileft, iright, null, s, new NilExp(ileft, iright));
                        :}
                     
                     /* ERROR: Invalid syntax after ')' in IF statement without ELSE */
                     | IF:i LPAREN expression:exp RPAREN error:e statement:s
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax after ')'.", e); 
                           RESULT = new IfExp(ileft, iright, exp, s, new NilExp(ileft, iright));
                        :}
                     
                     /* ERROR: Invalid syntax before '(' in IF statement */
                     | IF:i error:e LPAREN expression:exp RPAREN statement:s
                        {: parser.report_error("Invalid if statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax before '('.", e); 
                           RESULT = new IfExp(ileft, iright, exp, s, new NilExp(ileft, iright));
                        :}
                     ;

/* Iteration statement: a 'while' loop */
/* Example: while (x > 0) { ... } */
iterationStatement ::= 
                     /* Standard WHILE loop */
                     WHILE:w LPAREN expression:e RPAREN statement:s
                        {: RESULT = new WhileExp(wleft, wright, e, s); :}
                     
                     /* ERROR: Invalid condition inside WHILE loop */
                     | WHILE:w LPAREN error:e RPAREN statement:s
                        {: parser.report_error("Invalid while statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid conditional statement.", e); 
                           RESULT = new WhileExp(wleft, wright, null, s);
                        :}
                     
                     /* ERROR: Invalid syntax before '(' in WHILE loop */
                     | WHILE:w error:e LPAREN expression:exp RPAREN statement:s
                        {: parser.report_error("Invalid while statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax before '('.", e); 
                           RESULT = new WhileExp(wleft, wright, exp, s);
                        :}
                     
                     /* ERROR: Invalid syntax after ')' in WHILE loop */
                     | WHILE:w LPAREN expression:exp RPAREN error:e statement:s
                        {: parser.report_error("Invalid while statement in line " + (eleft + 1) + " at column " + (eright + 1) + " invalid syntax after ')'.", e); 
                           RESULT = new WhileExp(wleft, wright, exp, s);
                        :}
                     ;

/* Return statement: returns an expression or simply ends the function */
/* Example: return x; or return; */
returnStatement ::= 
                     /* RETURN with no value */
                     RETURN:r SEMI
                        {: RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); :}
                     
                     /* RETURN with an expression */
                     | RETURN:r expression:e SEMI
                        {: RESULT = new ReturnExp(rleft, rright, e); :}
                     
                     /* ERROR: Invalid syntax before semicolon in RETURN */
                     | RETURN:r expression:exp error:e SEMI
                        {: parser.report_error("Invalid return expression before ';' in line " + (eleft + 1) + " at column " + (eright + 1), e); 
                           RESULT = new ReturnExp(rleft, rright, exp);
                        :}
                     
                     /* ERROR: Missing semicolon in RETURN */
                     | RETURN:r error:e
                        {: parser.report_error("Invalid return expression in line " + (rleft + 1) + " at column " + rright + ": missing semicolon.", null); 
                           RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright));
                        :}
                     ;

/* Expression: an assignment or a boolean expression */
/* Example: x = 5; or x > 0; */
expression  ::= var:v ASSIGN expression:e
               // Assignment expression (e.g., x = y + 1)
               {: RESULT = new AssignExp(vleft, vright, new VarExp(vleft, vright, v), e); :}
            | expression:e1 PLUS expression:e2
               // Addition operation (e.g., a + b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
            | expression:e1 MINUS expression:e2
               // Subtraction operation (e.g., a - b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
            | expression:e1 TIMES expression:e2
               // Multiplication operation (e.g., a * b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.TIMES, e2); :}
            | expression:e1 OVER expression:e2
               // Division operation (e.g., a / b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OVER, e2); :}
            | expression:e1 EQ expression:e2
               // Equality check (e.g., a == b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.EQ, e2); :}
            | expression:e1 NE expression:e2
               // Not equal check (e.g., a != b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.NE, e2); :}
            | expression:e1 LT expression:e2
               // Less than comparison (e.g., a < b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LT, e2); :}
            | expression:e1 LE expression:e2
               // Less than or equal comparison (e.g., a <= b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LE, e2); :}
            | expression:e1 GT expression:e2
               // Greater than comparison (e.g., a > b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GT, e2); :}
            | expression:e1 GE expression:e2
               // Greater than or equal comparison (e.g., a >= b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GE, e2); :}
            | NOT:n expression:e
               // Logical NOT operation (e.g., !a)
               {: RESULT = new OpExp(nleft, nright, new NilExp(nleft, nright), OpExp.NOT, e); :}
            | expression:e1 AND expression:e2
               // Logical AND operation (e.g., a && b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.AND, e2); :}
            | expression:e1 OR expression:e2
               // Logical OR operation (e.g., a || b)
               {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OR, e2); :}
            | MINUS:m expression:e
               // Unary minus (negation) (e.g., -a)
               {: RESULT = new OpExp(mleft, mright, new NilExp(mleft, mright), OpExp.UMINUS, e); :}
            | LPAREN expression:e RPAREN
               // Parenthesized expression (e.g., (a + b))
               {: RESULT = e; :}
            | var:v
               // Variable reference (e.g., x)
               {: RESULT = new VarExp(vleft, vright, v); :}
            | ID:id LPAREN args:a RPAREN
               // Function call with arguments (e.g., f(a, b))
               {: RESULT = new CallExp(idleft, idright, id, a); :}
            | ID:id LPAREN RPAREN
               // Function call without arguments (e.g., f())
               {: RESULT = new CallExp(idleft, idright, id, null); :}
            | NUM:n
               // Integer constant (e.g., 42)
               {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
            | TRUTH:t
               // Boolean constant (e.g., true, false)
               {: RESULT = new BoolExp(tleft, tright, Boolean.parseBoolean(t)); :}
            ;

/* Variable usage: can be scalar or array access */
/* Example: x or x[5] */
var   ::= ID:id
         {: RESULT = new SimpleVar(idleft, idright, id); :}
      | ID:id LBRACKET expression:e RBRACKET
         {: RESULT = new IndexVar(idleft, idright, id, e); :}
      ;

/* Arguments: comma-separated or empty */
/* Example: 2, 3 or empty */
args  ::= argsList:al
         {: RESULT = al; :}
      ;

/* List of arguments */
/* Example: x, y */
argsList ::= argsList:al COMMA expression:e
            {: ExpList t = al;
               while ( t.tail != null )
                  t = t.tail;
               t.tail = new ExpList(e, null);
               RESULT = al;
            :}
         | expression:e
            {: RESULT = new ExpList(e, null); :}
         ;
